<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WRISH</title>
    <link>http://www.wrish.com/tags/office365/index.xml</link>
    <description>Recent content on WRISH</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <atom:link href="http://www.wrish.com/tags/office365/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Powershell get Exchange Online IP addresses (for Firewall rules)</title>
      <link>http://www.wrish.com/post/quickly-get-exchange-online-ips/</link>
      <pubDate>Thu, 15 Jun 2017 23:47:35 +0000</pubDate>
      
      <guid>http://www.wrish.com/post/quickly-get-exchange-online-ips/</guid>
      <description>&lt;p&gt;This one-liner will download the Office 365 IP list XML file and extract the IPv4 addresses for EOP and Exchange Online.
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;([xml](invoke-webrequest -uri https://go.microsoft.com/fwlink/?LinkId=533185) | select-xml -XPath &#39;.//product[@name = &amp;quot;EOP&amp;quot; or @name = &amp;quot;EXO&amp;quot;]//addresslist[@type = &amp;quot;IPv4&amp;quot;]//address&#39;).node.&amp;quot;#text&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are using an XPATH filter to examine the XML document for the appropriate data. Like regular expressions for almost all text, understanding XPath can be very helpful for anything that uses XML underneath the covers, like event logs.&lt;/p&gt;

&lt;p&gt;The basic file structure of the XML document looks like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
    &amp;lt;products updated=&amp;quot;6/6/2017&amp;quot;&amp;gt;
        &amp;lt;product name=&amp;quot;o365&amp;quot;&amp;gt;
            &amp;lt;addresslist type=&amp;quot;IPv6&amp;quot;&amp;gt;
                &amp;lt;address&amp;gt;2603:1020:200::682f:a1d8/128&amp;lt;/address&amp;gt;
                    ...             
            &amp;lt;/addresslist&amp;gt;
            &amp;lt;addresslist type=&amp;quot;IPv4&amp;quot;&amp;gt;
                &amp;lt;address&amp;gt;13.64.196.27/32&amp;lt;/address&amp;gt;              
                    ...
            &amp;lt;/addresslist&amp;gt;
            &amp;lt;addresslist type=&amp;quot;URL&amp;quot;&amp;gt;
                &amp;lt;address&amp;gt;*.aadrm.com&amp;lt;/address&amp;gt;              
                    ...
            &amp;lt;/addresslist&amp;gt;
        &amp;lt;/product&amp;gt;
        &amp;lt;product name=&amp;quot;EOP&amp;quot;&amp;gt;
            ...
        &amp;lt;/product&amp;gt;
    &amp;lt;/products&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Xpath Command &lt;code&gt;.//product[@name = &amp;quot;EOP&amp;quot; or @name = &amp;quot;EXO&amp;quot;]//addresslist[@type = &amp;quot;IPv4&amp;quot;]//address&lt;/code&gt; is saying
Search from the root for a &lt;em&gt;product&lt;/em&gt; with &lt;em&gt;name&lt;/em&gt; attribute of &lt;em&gt;EOP&lt;/em&gt; or &lt;em&gt;EXO&lt;/em&gt; and find &lt;em&gt;addresslist&lt;/em&gt; under it with &lt;em&gt;type&lt;/em&gt; of &lt;em&gt;IPv4&lt;/em&gt;
This gives us all the IPv4 addresses within the products EOP and EXO in CIDR format.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Assign EMS licenses to all licensed users with dynamic groups</title>
      <link>http://www.wrish.com/post/assign-ems-licenses-with-dynamic-groups/</link>
      <pubDate>Fri, 10 Mar 2017 11:42:35 -0500</pubDate>
      
      <guid>http://www.wrish.com/post/assign-ems-licenses-with-dynamic-groups/</guid>
      <description>&lt;p&gt;Azure conditional access provides flexible control over access to Office 365 resources and services based on location/user group membership/device etc. If you set up conditional access rules, any user who doesn&amp;rsquo;t have an Azure AD Premium license will not be affected by them - access is permitted by default!&lt;/p&gt;

&lt;p&gt;How to work around this without manually assigning licenses to every user or using a &lt;a href=&#34;http://www.wrish.com/post/assign-ems-licenses/&#34;&gt;dodgy script&lt;/a&gt;? Azure AD has a capability called &lt;em&gt;Dynamic Groups&lt;/em&gt;. With &lt;em&gt;Dynamic Groups&lt;/em&gt; you can create a group with membership based on a query.&lt;/p&gt;

&lt;p&gt;This query will result in a group that contains all users with Exchange, Sharepoint, Office or S4B enabled.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(user.assignedPlans -any ((assignedPlan.service -match &amp;quot;exchange|SharePoint|Microsoft(CommunicationsOnline|Office)&amp;quot;) -and (assignedPlan.capabilityStatus -eq &amp;quot;Enabled&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you simply &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/active-directory-licensing-group-assignment-azure-portal&#34;&gt;assign EMS licenses&lt;/a&gt; to the dynamic group. Now, when a user is activated for Exchange etc, they immediately get an EMS license and Conditional Access applies. The user will inherit the license until they are no longer a member of the group&lt;/p&gt;

&lt;p&gt;Read more about creating &lt;em&gt;Dynamic Groups&lt;/em&gt; here &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/active-directory-groups-dynamic-membership-azure-portal&#34;&gt;https://docs.microsoft.com/en-us/azure/active-directory/active-directory-groups-dynamic-membership-azure-portal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During testing in a small environment I found that the license membership changed within 5 minutes.&lt;/p&gt;

&lt;p&gt;Possible values for &lt;em&gt;assignedPlan.service&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Value&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Service Friendly Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ProcessSimple&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Flow for Office365&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;PowerAppsService&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PowerApps for Office 365&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;TeamspaceAPI&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Microsoft Teams&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ProjectWorkManagement&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Microsoft Planner&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Sway&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sway&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;YammerEnterprise&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yammer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;MicrosoftOffice&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Office 365 ProPlus&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;MicrosoftCommunicationsOnline&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Skype for Business Online&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SharePoint&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SharePoint Online&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;exchange&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Exchange Online&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Deskless&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Staff Hub&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;RMSOnline&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Azure Information Protection Plan &lt;br /&gt;Azure Rights Management&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;MultiFactorService&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Azure Multi-Factor Authentication&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;AADPremiumService&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Azure Active Directory Premium&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SCO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Intune A Direct&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Adallom&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Microsoft Cloud App Security&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;VolumeLicensing&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Microsoft Business Center&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Possible values for &lt;em&gt;assignedPlan.capabilityStatus&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Value&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Deleted&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;License has been removed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Enabled&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;License is active&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Suspended&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;License has been removed (applies to EMS licenses)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Assign EMS licenses to all licensed users</title>
      <link>http://www.wrish.com/post/assign-ems-licenses/</link>
      <pubDate>Mon, 13 Feb 2017 11:42:35 -0500</pubDate>
      
      <guid>http://www.wrish.com/post/assign-ems-licenses/</guid>
      <description>&lt;p&gt;Azure conditional access provides amazingly flexible control over access to Office 365 resources and services based on location/user group membership/device etc. Leveraging it to block access generally requires EMS (Enterprise Mobility + Security) licenses for all users. This short script will assign EMS licenses to all users in your tenant who are licensed but do not have EMS yet.
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$VerbosePreference = &amp;quot;Continue&amp;quot;
$SKU = get-msolaccountSKU | ?{$_.accountskuid -match &#39;:EMS$&#39;} | select -expand AccountSKUID
if ($SKU) {
    $LicensingFailures = @{}
   $allUsersThatNeedEMS = get-msoluser -all | ?{$_.islicensed -and !($_.licenses | ?{$_.accountskuid -eq $SKU})}
   $allusersThatNeedEMS | %{
        $u = $_;
        try{ 
            Set-MsolUserLicense -UserPrincipalName $u.userprincipalname -AddLicenses $SKU -ErrorAction Stop
            Write-verbose &amp;quot;Successfully added $SKU to $($u.userprincipalname)&amp;quot; 
        } catch {
            Write-Error &amp;quot;Failed to add $SKU to $($u.userprincipalname) because: $_&amp;quot;
            $LicensingFailures.&amp;quot;$($u.userprincipalname)&amp;quot; = $_
        }
    }
    Write-host &amp;quot;The following failures occurred&amp;quot;
    $LicensingFailures
} else {
    Write-host &amp;quot;No EMS license SKU found&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Office 365 - Convert between Immutable ID and AD Object </title>
      <link>http://www.wrish.com/post/convert-between-immutableid-and-ad-object/</link>
      <pubDate>Thu, 22 Dec 2016 20:53:49 -0500</pubDate>
      
      <guid>http://www.wrish.com/post/convert-between-immutableid-and-ad-object/</guid>
      <description>&lt;p&gt;Two quick scripts to convert between ImmutableIDs and AD Objects with pipeline capability.
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;
function get-ImmutableIDfromADObject
{
    [CmdletBinding()] Param(
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]$ADObject) 
   process{ 
        if (!$ADObject.objectguid){$ADObject = get-adobject $AdObject -properties objectGuid}
        [system.convert]::ToBase64String($ADObject.objectguid.tobytearray())
    }
}

function get-ADObjectFromImmutableID{
      [CmdletBinding()] Param(
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)][string]$ImmutableID)
   process { get-adobject  ([guid]([system.convert]::FromBase64String($ImmutableID)))}
}

&amp;lt;#
get-aduser shane.wright | get-ImmutableIDfromADObject
6WuADX7LfUa8DVAQGxuZcA==

get-aduser shane.wright | get-ImmutableIDfromADObject | get-ADObjectFromImmutableID

DistinguishedName                          Name         ObjectClass ObjectGUID                          
-----------------                          ----         ----------- ----------                          
CN=Shane Wright,OU=Staff,DC=contoso,DC=com Shane Wright user        0d806be9-cb7e-467d-bc0d-50101b1b9970


get-ADObjectFromImmutableID 6WuADX7LfUa8DVAQGxuZcA==
DistinguishedName                          Name         ObjectClass ObjectGUID                          
-----------------                          ----         ----------- ----------                          
CN=Shane Wright,OU=Staff,DC=contoso,DC=com Shane Wright user        0d806be9-cb7e-467d-bc0d-50101b1b9970
#&amp;gt;

&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>