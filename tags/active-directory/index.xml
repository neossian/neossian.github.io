<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WRISH</title>
    <link>http://www.wrish.com/tags/active-directory/index.xml</link>
    <description>Recent content on WRISH</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <atom:link href="http://www.wrish.com/tags/active-directory/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Isolate a DC - Part 2: Reset SYSVOL Sync State</title>
      <link>http://www.wrish.com/post/isolate-dc-pt2-reset-sysvol-syncstate/</link>
      <pubDate>Tue, 01 Aug 2017 02:47:35 +0000</pubDate>
      
      <guid>http://www.wrish.com/post/isolate-dc-pt2-reset-sysvol-syncstate/</guid>
      <description>

&lt;p&gt;This is Part 2 of a multi part blog post covering the steps to Isolate a Domain Controller - if not emotionally, then logically.&lt;/p&gt;

&lt;h2 id=&#34;reset-your-dfsr-sysvol-state&#34;&gt;Reset your DFSR SYSVol State&lt;/h2&gt;

&lt;p&gt;A DC booting into it&amp;rsquo;s own little world wont become healthy until SYSVOL has completed a sync with a partner in its domain, now this step is optional if your
domain is temporary, but if you ever want to promote a new DC, or have a beautiful clear DCDIAG, then you&amp;rsquo;ll need to force SYSVOL into a &lt;em&gt;synced&lt;/em&gt; state. Not by threatening to put it to bed early, but instead by tweaking its &lt;code&gt;msDFSR-Options&lt;/code&gt; on its &lt;code&gt;SYSVol Subscription&lt;/code&gt; object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;function Reset-SYSVOLSyncState{
    set-adobject &amp;quot;cn=sysvol Subscription,cn=domain system volume,cn=dfsr-LocalSettings,$((get-adcomputer $(&amp;amp;hostname)).distinguishedname)&amp;quot; -Replace @{&#39;msDFSR-Options&#39;=1}
    restart-service DFSR
}

Reset-SYSVOLSyncState
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the other parts of this series here:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Isolate a DC - Part 5: Disable Global Catalog</title>
      <link>http://www.wrish.com/post/isolate-dc-pt5-disable-global-catalog/</link>
      <pubDate>Wed, 10 May 2017 02:47:35 +0000</pubDate>
      
      <guid>http://www.wrish.com/post/isolate-dc-pt5-disable-global-catalog/</guid>
      <description>

&lt;p&gt;This is Part 5 of a series on Active Directory Forest recovery which requires brining up restored DCs in their own network; bring them up with good manners and we all benefit.&lt;/p&gt;

&lt;h2 id=&#34;disable-global-catalog&#34;&gt;Disable Global Catalog&lt;/h2&gt;

&lt;p&gt;Now this step is strictly for Multi-Domain Forest recoveries. If your domains replicate cross domain boundaries, they&amp;rsquo;ll start complaining about their USNs and nobody wants that. If you&amp;rsquo;ve got yourself a nice simple single Domain environment, don&amp;rsquo;t sweat it and move on your Global Catalog can merrily sing into the night air without anybody noticing.&lt;/p&gt;

&lt;p&gt;I mentioned in &lt;a href=&#34;http://www.wrish.com/post/isolate-dc-pt3-activate-administrator-account&#34;&gt;Part 3: Activate Administrator Account&lt;/a&gt; that only the Administrator could login with the Global Catalog missing, that isn&amp;rsquo;t strictly true. This function will disable the GC on the local server, but also configure &lt;code&gt;IgnoreGCFailures&lt;/code&gt; which conveniently allows anyone to login without a GC! Hurrah for workarounds, just be aware that your login will not include any Universal Group SIDS (because they are in the Global Catalog) which means that &lt;insert wooping siren sounds&gt; there is a possible vulnerability for bypassing Deny permissions set on Universal Groups.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;function Disable-GC {
    [CmdletBinding(
    SupportsShouldProcess = $true,
    ConfirmImpact = &#39;High&#39;)]param()
    if ($pscmdlet.ShouldProcess($(&amp;amp;hostname))){
        Write-verbose &amp;quot;Disabling Global Catalog on local server&amp;quot;    
        repadmin.exe /options $(&amp;amp;hostname) â€“IS_GC 
        Write-Verbose &amp;quot;Setting IgnoreGCFailures so that normal user accounts can login without GC&amp;quot;
        Write-Warning &amp;quot;With IgnoreGCFailures enabled, permissions granted using Universal Groups including deny permissions will not be honoured&amp;quot;
        set-itemproperty -path &amp;quot;HKLM:SYSTEM\CurrentControlSet\Control\Lsa&amp;quot; -Name IgnoreGCFailures -Value 1 
    }
}

Disable-GC
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Isolate a DC - Part 4: Reset DSRM Password</title>
      <link>http://www.wrish.com/post/isolate-dc-pt4-reset-dsrm-password/</link>
      <pubDate>Sat, 29 Apr 2017 02:47:35 +0000</pubDate>
      
      <guid>http://www.wrish.com/post/isolate-dc-pt4-reset-dsrm-password/</guid>
      <description>

&lt;p&gt;This is Part 4 of a multi part blog post on Domain Recovery and DC Isolation with the aid of Powershell in todays installment we learn that Directory Services Restore Mode (DSRM) is not actually needed to perform a full forest recovery.&lt;/p&gt;

&lt;h2 id=&#34;reset-dsrm-password&#34;&gt;Reset DSRM Password&lt;/h2&gt;

&lt;p&gt;Another typically unnecessary step is getting your hands on your DSRM password - if you don&amp;rsquo;t already have it. DSRM password is only used in DSRM mode, which you don&amp;rsquo;t need for this fun exercise, but why not have it just in case!&lt;/p&gt;

&lt;p&gt;Now this step is not really Powershell, and not really automated, if you wanted to do the later you could probably create an account, set its password, and then sync the password to the DSRM Administrator account, but I wasn&amp;rsquo;t feeling that energetic this morning. So just type your password a couple of times and be done with it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;function Reset-DSRMPassword (){
    Write-verbose &amp;quot;Calling NTDSUtil to reset the DSRM password on the local server&amp;quot;
    ntdsutil &amp;quot;set DSRM Password&amp;quot; &amp;quot;Reset Password on Server NULL&amp;quot; q q
}

Reset-DSRMPassword
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Isolate a DC - Part 3: Activate Administrator Account</title>
      <link>http://www.wrish.com/post/isolate-dc-pt3-activate-administrator-account/</link>
      <pubDate>Sun, 23 Apr 2017 02:47:35 +0000</pubDate>
      
      <guid>http://www.wrish.com/post/isolate-dc-pt3-activate-administrator-account/</guid>
      <description>

&lt;p&gt;This is Part 3 of a multi part blog post automating AD Forest Recovery, take your forest to rehab, sit it down and force it not to have any AD corruption.&lt;/p&gt;

&lt;h2 id=&#34;activate-administrator-account&#34;&gt;Activate Administrator Account&lt;/h2&gt;

&lt;p&gt;Now I am not one for a false sense of security, but people building environments that I support are. That is why, more often than not, the Administrator account is renamed, the password is divided in 2 and stored at different ends of the earth, one under the 6 watchful eyes of Cerberus the other stuffed in a filing cabinet lost to the ages. Of course, one day you will need to promote a DC, or do a Schema change and so you have people with Domain Admin accounts. However, the Administrator account is the only one that can login if you don&amp;rsquo;t have a Global Catalog available&amp;hellip; so&amp;hellip; just in case, lets make all that skullduggery moot by ressurecting that Administrator account.&lt;/p&gt;

&lt;p&gt;This script will devine your Admin account Samaccountname with nothing but two sticks and a well known SID. Ensure it is enabled, and set its password to something easy to remember that is conveniently printed to the screen.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;function Activate-AdminAccount{
    [CmdletBinding(
    SupportsShouldProcess = $true,
    ConfirmImpact = &#39;High&#39;)]
    param($PlainTextPassword)
        
    #Identify and enable the Admin account (note that password will be reset)
    $domainObj = get-addomain 
    $AdminAccount = ([ADSI]&amp;quot;LDAP://&amp;lt;SID=$($domainObj.Domainsid)-500&amp;gt;&amp;quot;).distinguishedname[0]
    Write-Verbose &amp;quot;AD Admin account located $AdminAccount&amp;quot;    
    get-aduser $AdminAccount -properties Samaccountname  |fl Samaccountname,@{l=&#39;Password&#39;;e={$PlainTextPassword}}     
    if ($pscmdlet.ShouldProcess($adminAccount)){
        Write-verbose &amp;quot;Activating $AdminAccount and resetting password to $plainTextPassword&amp;quot;
        $password = (ConvertTo-SecureString -AsPlainText $plainTextPassword -Force) 
        set-adaccountpassword -Identity &amp;quot;$($domainObj.Domainsid)-500&amp;quot; -reset -newpassword $password
        set-aduser $AdminAccount -Enabled $true
    }    
} 

Activate-AdminAccount -plainTextPassword &amp;quot;ThisIsTheMostC0mplexPasswordICou1dThinkOf&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Isolate a DC - Part 1: Configure the Network</title>
      <link>http://www.wrish.com/post/isolate-dc-pt1-configure-the-network/</link>
      <pubDate>Wed, 05 Apr 2017 02:47:35 +0000</pubDate>
      
      <guid>http://www.wrish.com/post/isolate-dc-pt1-configure-the-network/</guid>
      <description>

&lt;p&gt;Dragging a single Domain Controller by its nostril into an isolated network can be time consuming. For testing or disaster recovery, the steps are the same, and while well documented almost everywhere, there don&amp;rsquo;t seem to be any quick and dirty tools to do the steps for you. That is why I wrote this series of powershell functions that can be applied to a DC you have restored in your Virtual environment to get your test Forest up and running quickly.&lt;/p&gt;

&lt;p&gt;Note that all these functions are design to work in Windows 2012 R2 or higher, and while they&amp;rsquo;ve been tested, they are designed to do serious damage to your test environment and should never be used in production.&lt;/p&gt;

&lt;h2 id=&#34;configure-the-network&#34;&gt;Configure the Network&lt;/h2&gt;

&lt;p&gt;Configure the network card of your restored Domain Controller such that it points only to itself for DNS. Your Domain Controller needs to be able to locate itself when it is starting up to become healthy. So DNS and the network stack need to be operational. Make sure your Network is not connected externally. Having multiple DCs communicating on the same Name/IP Address/Domain Enviornment is unhealthy for your long term career prospects.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll need to know your desired IP and subnet mask.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;function ConfigureDCNetwork {
    [CmdletBinding(
    SupportsShouldProcess = $true,
    ConfirmImpact = &#39;High&#39;)]    
    param([parameter(mandatory=$true,
    HelpMessage=&amp;quot;Enter the IP Address this server will use&amp;quot;)][ValidatePattern(&#39;\b(?:\d{1,3}\.){3}\d{1,3}\b&#39;)][string]$IPAddress,
    [parameter(mandatory=$true,HelpMessage=&amp;quot;Enter the number of bits in the subnet mask eg 24 = 255.255.255.0&amp;quot;)][ValidateRange(2,30)]$CIDRSubnet,
    [parameter(mandatory=$true,HelpMessage=&amp;quot;Enter the default gateway IP address&amp;quot;)][ValidatePattern(&#39;\b(?:\d{1,3}\.){3}\d{1,3}\b&#39;)][string]$DefaultGateway)
    Write-Warning &amp;quot;Changing the IP address may result in lost network connectivity - ensure you have console access to this host&amp;quot;
    if ($pscmdlet.ShouldProcess($(&amp;amp;hostname))){  
        $netadapter = Get-NetAdapter | select -first 1
        Write-verbose &amp;quot;Disabling DHCP on first interface&amp;quot;
        $netadapter | Set-NetIPInterface -DHCP Disabled
        Write-verbose &amp;quot;Configuring Network Address and default gateway&amp;quot;
        $netadapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $IPAddress -PrefixLength $CIDRSubnet -Type Unicast -DefaultGateway $DefaultGateway
        Write-Verbose &amp;quot;Pointing Domain Controller at self for DNS&amp;quot;
        Set-DnsClientServerAddress -InterfaceAlias $netadapter.Name -ServerAddresses $IPAddress  
    }
}
#                 IP Address  Prefix Default Gateway
ConfigureDCNetwork 192.168.1.10 24 192.168.1.1
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>