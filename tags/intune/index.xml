<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Intune on WRISH</title>
    <link>http://www.wrish.com/tags/intune/</link>
    <description>Recent content in Intune on WRISH</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 18 Apr 2017 23:47:35 +0000</lastBuildDate>
    
	<atom:link href="http://www.wrish.com/tags/intune/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>import-svclog to import SVCLOG files</title>
      <link>http://www.wrish.com/post/use-powershell-to-open-svclog-files/</link>
      <pubDate>Tue, 18 Apr 2017 23:47:35 +0000</pubDate>
      
      <guid>http://www.wrish.com/post/use-powershell-to-open-svclog-files/</guid>
      <description>&lt;p&gt;The Intune connectors dump all their useful information to .svclog files. You can read these files wtih svcTraceViewer.exe which you can get by installing the Windows Communication Foundation SDK.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t want to download the SDK just to get one tool? Do not fear - they are just XML. Here is an imperfect script for reading svclog files.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTTPs Inspection on Android with Hyper-V and an Emulator</title>
      <link>http://www.wrish.com/post/android-fiddler-hyperv-solution/</link>
      <pubDate>Sun, 16 Apr 2017 23:47:35 +0000</pubDate>
      
      <guid>http://www.wrish.com/post/android-fiddler-hyperv-solution/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been doing some work with Microsoft Intune - specifically around Conditional Access, Azure AD and Intune. There are plenty of guides online for getting a Fiddler trace of HTTPS traffic between Android and a back end, but they all require you to have your Windows Laptop on the same network as your Android device. In a modern corporate network architecture that isn&amp;rsquo;t easy. The Microsoft support team, my customer network, and my conracting company network were all locked down preventing this setup.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Assign EMS licenses to all licensed users with dynamic groups</title>
      <link>http://www.wrish.com/post/assign-ems-licenses-with-dynamic-groups/</link>
      <pubDate>Fri, 10 Mar 2017 11:42:35 -0500</pubDate>
      
      <guid>http://www.wrish.com/post/assign-ems-licenses-with-dynamic-groups/</guid>
      <description>Azure conditional access provides flexible control over access to Office 365 resources and services based on location/user group membership/device etc. If you set up conditional access rules, any user who doesn&amp;rsquo;t have an Azure AD Premium license will not be affected by them - access is permitted by default!
How to work around this without manually assigning licenses to every user or using a dodgy script? Azure AD has a capability called Dynamic Groups.</description>
    </item>
    
    <item>
      <title>Assign EMS licenses to all licensed users</title>
      <link>http://www.wrish.com/post/assign-ems-licenses/</link>
      <pubDate>Mon, 13 Feb 2017 11:42:35 -0500</pubDate>
      
      <guid>http://www.wrish.com/post/assign-ems-licenses/</guid>
      <description>&lt;p&gt;Azure conditional access provides amazingly flexible control over access to Office 365 resources and services based on location/user group membership/device etc. Leveraging it to block access generally requires EMS (Enterprise Mobility + Security) licenses for all users. This short script will assign EMS licenses to all users in your tenant who are licensed but do not have EMS yet.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>