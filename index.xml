<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WRISH</title>
    <link>http://www.wrish.com/index.xml</link>
    <description>Recent content on WRISH</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 15 Jun 2017 23:47:35 +0000</lastBuildDate>
    <atom:link href="http://www.wrish.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Powershell get Exchange Online IP addresses (for Firewall rules)</title>
      <link>http://www.wrish.com/post/quickly-get-exchange-online-ips/</link>
      <pubDate>Thu, 15 Jun 2017 23:47:35 +0000</pubDate>
      
      <guid>http://www.wrish.com/post/quickly-get-exchange-online-ips/</guid>
      <description>&lt;p&gt;This one-liner will download the Office 365 IP list XML file and extract the IPv4 addresses for EOP and Exchange Online.
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;([xml](invoke-webrequest -uri https://go.microsoft.com/fwlink/?LinkId=533185) | select-xml -XPath &#39;.//product[@name = &amp;quot;EOP&amp;quot; or @name = &amp;quot;EXO&amp;quot;]//addresslist[@type = &amp;quot;IPv4&amp;quot;]//address&#39;).node.&amp;quot;#text&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are using an XPATH filter to examine the XML document for the appropriate data. Like regular expressions for almost all text, understanding XPath can be very helpful for anything that uses XML underneath the covers, like event logs.&lt;/p&gt;

&lt;p&gt;The basic file structure of the XML document looks like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
    &amp;lt;products updated=&amp;quot;6/6/2017&amp;quot;&amp;gt;
        &amp;lt;product name=&amp;quot;o365&amp;quot;&amp;gt;
            &amp;lt;addresslist type=&amp;quot;IPv6&amp;quot;&amp;gt;
                &amp;lt;address&amp;gt;2603:1020:200::682f:a1d8/128&amp;lt;/address&amp;gt;
                    ...             
            &amp;lt;/addresslist&amp;gt;
            &amp;lt;addresslist type=&amp;quot;IPv4&amp;quot;&amp;gt;
                &amp;lt;address&amp;gt;13.64.196.27/32&amp;lt;/address&amp;gt;              
                    ...
            &amp;lt;/addresslist&amp;gt;
            &amp;lt;addresslist type=&amp;quot;URL&amp;quot;&amp;gt;
                &amp;lt;address&amp;gt;*.aadrm.com&amp;lt;/address&amp;gt;              
                    ...
            &amp;lt;/addresslist&amp;gt;
        &amp;lt;/product&amp;gt;
        &amp;lt;product name=&amp;quot;EOP&amp;quot;&amp;gt;
            ...
        &amp;lt;/product&amp;gt;
    &amp;lt;/products&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Xpath Command &lt;code&gt;.//product[@name = &amp;quot;EOP&amp;quot; or @name = &amp;quot;EXO&amp;quot;]//addresslist[@type = &amp;quot;IPv4&amp;quot;]//address&lt;/code&gt; is saying
Search from the root for a &lt;em&gt;product&lt;/em&gt; with &lt;em&gt;name&lt;/em&gt; attribute of &lt;em&gt;EOP&lt;/em&gt; or &lt;em&gt;EXO&lt;/em&gt; and find &lt;em&gt;addresslist&lt;/em&gt; under it with &lt;em&gt;type&lt;/em&gt; of &lt;em&gt;IPv4&lt;/em&gt;
This gives us all the IPv4 addresses within the products EOP and EXO in CIDR format.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerShell Oneliners</title>
      <link>http://www.wrish.com/post/powershell-oneliners/</link>
      <pubDate>Wed, 17 May 2017 11:42:35 -0500</pubDate>
      
      <guid>http://www.wrish.com/post/powershell-oneliners/</guid>
      <description>&lt;p&gt;Just a list of useful oneliners for powershell server and AD management
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;#Retrieve the PDC AD Object using ADSI
$PDC = [adsi]([adsi]&amp;quot;LDAP://$(([adsi]&amp;quot;LDAP://$(([adsi]&amp;quot;LDAP://rootdse&amp;quot;).defaultNamingContext)&amp;quot;).fsmoroleowner)&amp;quot;).parent 

#PDC name to the clipboard
([adsi]([adsi]&amp;quot;LDAP://$(([adsi]&amp;quot;LDAP://$(([adsi]&amp;quot;LDAP://rootdse&amp;quot;).defaultNamingContext)&amp;quot;).fsmoroleowner)&amp;quot;).parent ).dnshostname | clip

#Quickly list dnshostname of all DCs in the forest
(New-Object adsisearcher([adsi]&amp;quot;LDAP://$(([adsi]&amp;quot;LDAP://rootdse&amp;quot;).configurationNamingContext)&amp;quot;,&amp;quot;(objectClass=nTDSDSA)&amp;quot;)).findall() | %{($_.properties.distinguishedname[0] -replace &#39;cn=NTDS Settings,&#39;,&#39;&#39;)} | %{[adsi]&amp;quot;LDAP://$_&amp;quot;} | select -expand dnshostname

#get the last executed command to the clipboard
(get-history)[-1].commandline | clip

#Get the last boot time to a date/time object
wmic os get lastbootuptime | ?{$_ -match &#39;^(?&amp;lt;year&amp;gt;\d\d\d\d)(?&amp;lt;month&amp;gt;\d\d)(?&amp;lt;day&amp;gt;\d\d)&#39;} | %{ (get-date -year $matches.year -month $matches.month -day $matches.day)} 
(get-wmiobject Win32_OperatingSystem -Property lastbootuptime).lastbootuptime 

#get the last boot time to the clipboard
wmic os get lastbootuptime | ?{$_ -match &#39;^(?&amp;lt;year&amp;gt;\d\d\d\d)(?&amp;lt;month&amp;gt;\d\d)(?&amp;lt;day&amp;gt;\d\d)&#39;} | %{ (get-date -year $matches.year -month $matches.month -day $matches.day).tostring()} | clip

#Create a scheduled task to restart the server in x hours 
$hours = 1
schtasks /Create /RU &amp;quot;NT AUTHORITY\SYSTEM&amp;quot; /SC ONCE /st $((get-date).addhours($hours).tostring(&#39;hh:mm&#39;)) /TN My-ScheduledRestart /RL HIGHEST /TR &amp;quot;%windir%\system32\Shutdown.exe /r /t 10&amp;quot; /SD $((get-date).addhours($hours).tostring(&#39;MM/dd/yyyy&#39;))


&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Extracting objects from commands that output text</title>
      <link>http://www.wrish.com/post/extracting-objects-from-text-certutil/</link>
      <pubDate>Sun, 30 Apr 2017 23:47:35 +0000</pubDate>
      
      <guid>http://www.wrish.com/post/extracting-objects-from-text-certutil/</guid>
      <description>&lt;p&gt;There are many ways to throw a spanner. But if you really must throw it with powershell you&amp;rsquo;ll want it to result in an object.&lt;/p&gt;

&lt;p&gt;The versatility of objects can give much to legacy commands that still linger in the Windows administration world. This short tutorial should teach you to turn most legacy commands into one or more commandlets in some concise code.
&lt;/p&gt;

&lt;h2 id=&#34;step-1-get-your-command&#34;&gt;Step 1 - Get your command&lt;/h2&gt;

&lt;p&gt;First you&amp;rsquo;ll need to find your command, in this case we are going to try to list all CAs in the forest &lt;code&gt;Get-CA&lt;/code&gt; this can be done with &lt;code&gt;certutil -dump&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;certutil -dump

Entry 0:
  Name:                     `Contoso Issuing Certificate Authority&#39;
  Organizational Unit:      `Contoso IT Services&#39;
  Organization:             `Contoso&#39;
  ...
  Country/region:           `US&#39;
  Config:                   `CAServer.contoso.com\IssuingCertificateAuthority&#39;
  ...
  Short Name:               `Contoso Issuing Certificate Authority&#39;
  Sanitized Short Name:     `Contoso Issuing Certificate Authority&#39;
  Flags:                    `1&#39;
  Web Enrollment Servers: 
  ... Some data ...
CertUtil: -dump command completed successfully.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-2-design-your-regex&#34;&gt;Step 2 - Design your regex&lt;/h2&gt;

&lt;p&gt;The output of &lt;code&gt;certutil -dump&lt;/code&gt; has two key sections &lt;code&gt;Entry 0:&lt;/code&gt; which defines an object delimiter. And &lt;code&gt;Country/region:    `US&#39;&lt;/code&gt; which is the general format of our name value pairs.
&lt;code&gt;&#39;^Entry \d+:&lt;/code&gt; is the first regex we will use. &lt;code&gt;^&lt;/code&gt; represents the start of the line and &lt;code&gt;\d+&lt;/code&gt; represents &amp;ldquo;one or more digits&amp;rdquo; the rest is just direct character matching.
&lt;code&gt;&amp;quot;  (?&amp;lt;variable&amp;gt;[\w\s]+):\s+``(?&amp;lt;value&amp;gt;.*)&#39;&amp;quot;&lt;/code&gt; is the second regex. &lt;code&gt;?&amp;lt;varible&amp;gt;&lt;/code&gt; puts the matched value into a property for use &lt;code&gt;[\w\s]+&lt;/code&gt; matches any number of letter or whitepace characters and &lt;code&gt;.*&lt;/code&gt; is zero or more of any character. Note that the string part of this line starts with a backtick, to include a backtick you need to escape it so `` represents only one backtick.&lt;/p&gt;

&lt;h2 id=&#34;step-3-parse-your-result&#34;&gt;Step 3 - Parse your result&lt;/h2&gt;

&lt;p&gt;This same technique was used to wrap dnscmd before it had native Powershell counterparts.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt; #Get the result in a variable
 $result = certutil -dump
 #prepare an array for the objects
    $CAs = @()
    #Parse through the result
    switch -regex ($result){
        &#39;^Entry \d+:&#39;  {
            #When you hit an Entry put the object into the Array and create a new object
            if ($thisEntry){$CAs += $thisEntry}
            $thisEntry = new-object psobject;
        }
        &amp;quot;  (?&amp;lt;variable&amp;gt;[\w\s]+):\s+``(?&amp;lt;value&amp;gt;.*)&#39;&amp;quot;{
            #When you hit a parameter, add it to the object
            $thisEntry | Add-Member -MemberType NoteProperty -Name $matches.variable -value $matches.value -force
        }
    }    
    #If we finish parsing, put the last object in the array
    if ($thisEntry){$CAs += $thisEntry}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that &lt;code&gt;$CAs&lt;/code&gt;` contains our list of CAs!&lt;/p&gt;

&lt;h3 id=&#34;step-4-build-your-function&#34;&gt;Step 4 - Build your function&lt;/h3&gt;

&lt;p&gt;Wrap your code up in a function. As a bonus I have also included a command to list the published templates on each CA.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;function get-CAs {
    $result = certutil -dump
    $CAs = @()
    
    switch -regex ($result){
        &#39;^Entry \d+:&#39;  {
            if ($thisEntry){$CAs += $thisEntry}
            $thisEntry = new-object psobject;
        }
        &amp;quot;  (?&amp;lt;variable&amp;gt;[\w\s]+):\s+``(?&amp;lt;value&amp;gt;.*)&#39;&amp;quot;{
            $thisEntry | Add-Member -MemberType NoteProperty -Name $matches.variable -value $matches.value -force
        }
    }    
    if ($thisEntry){$CAs += $thisEntry}
    return $CAs
}

function get-CATemplatesAvailableToIssue ($CA) {
    if (!$CA -or $CA -notmatch &#39;^[\w\.]+\\\w+$&#39;) {
        $CAs = get-CAs
        $CAsToLookup = $CAs | ?{$_.Config -match $CA -or $_.Config -like $CA}
    } else {
        $CAsToLookup = new-object psobject -Property @{Config=$CA}
    }
    foreach ($Ca in $CAsToLookup) {        
        $result = certutil -config $($CA.config) -caTemplates
        switch -regex ($result) {
            &#39;^(?&amp;lt;Name&amp;gt;\w+): (?&amp;lt;DisplayName&amp;gt;.+) -- .+$&#39;{new-object psobject -Property @{Name=$matches.name;DisplayName=$matches.DisplayName;CA=$CA.config}}
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>import-svclog to import SVCLOG files</title>
      <link>http://www.wrish.com/post/use-powershell-to-open-svclog-files/</link>
      <pubDate>Tue, 18 Apr 2017 23:47:35 +0000</pubDate>
      
      <guid>http://www.wrish.com/post/use-powershell-to-open-svclog-files/</guid>
      <description>&lt;p&gt;The Intune connectors dump all their useful information to .svclog files. You can read these files wtih svcTraceViewer.exe which you can get by installing the Windows Communication Foundation SDK.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t want to download the SDK just to get one tool? Do not fear - they are just XML. Here is an imperfect script for reading svclog files.
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;function Import-SVCLog {
 [cmdletbinding()]
    Param (
        [parameter(ValueFromPipeline=$True)]
        [string[]]$FileName
    )    
    Process {
       ([xml](&amp;quot;&amp;lt;LogRoot&amp;gt;&amp;quot; + (get-content $fileName) + &amp;quot;&amp;lt;/LogRoot&amp;gt;&amp;quot; )).LogRoot.e2etraceevent | %{            
            $_ | select @{l=&#39;EventID&#39;;e={$_.system.EventID}},@{l=&#39;Type&#39;;e={$_.system.Type}},@{l=&#39;TimeCreated&#39;;e={$_.system.TimeCreated.SystemTime}},@{l=&#39;Source&#39;;e={$_.system.Source.Name}},@{l=&#39;Correlation&#39;;e={$_.system.Correlation.activityID}},@{l=&#39;Computer&#39;;e={$_.system.Computer}},@{l=&#39;Info&#39;;e={$_.ApplicationData}}                       
       }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy the script into your powershell context and then use it like this (for the Exchange connector)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cd &amp;quot;C:\ProgramData\Microsoft\Windows Intune Exchange Connector\Logs&amp;quot;
dir | import-svclog | out-gridView
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will get a neat graphical interface to sort and view the event data.&lt;/p&gt;

&lt;p&gt;Note that the path to most of the log files for the PKI connector is &lt;code&gt;C:\Program Files\Microsoft Intune\NDESConnectorSvc\Logs\Logs&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTTPs Inspection on Android with Hyper-V and an Emulator</title>
      <link>http://www.wrish.com/post/android-fiddler-hyperv-solution/</link>
      <pubDate>Sun, 16 Apr 2017 23:47:35 +0000</pubDate>
      
      <guid>http://www.wrish.com/post/android-fiddler-hyperv-solution/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been doing some work with Microsoft Intune - specifically around Conditional Access, Azure AD and Intune. There are plenty of guides online for getting a Fiddler trace of HTTPS traffic between Android and a back end, but they all require you to have your Windows Laptop on the same network as your Android device. In a modern corporate network architecture that isn&amp;rsquo;t easy. The Microsoft support team, my customer network, and my conracting company network were all locked down preventing this setup.
&lt;/p&gt;

&lt;h2 id=&#34;option-1-go-home&#34;&gt;Option 1 - Go Home&lt;/h2&gt;

&lt;p&gt;Drag the device home and setup fiddler in a few minutes, but if you need to troubleshoot at work, that can be a pain.&lt;/p&gt;

&lt;h2 id=&#34;option-2-android-sdk-emulator&#34;&gt;Option 2 - Android SDK/Emulator&lt;/h2&gt;

&lt;p&gt;This will work - as long as you aren&amp;rsquo;t running Hyper-V on your work machine already - you are? Oh.. well try option 3.&lt;/p&gt;

&lt;h2 id=&#34;option-3-microsoft-android-emulator-android-sdk&#34;&gt;Option 3 - Microsoft Android Emulator + Android SDK&lt;/h2&gt;

&lt;p&gt;Intune company portal APk
&lt;a href=&#34;https://www.microsoft.com/en-us/download/details.aspx?id=49140&#34;&gt;https://www.microsoft.com/en-us/download/details.aspx?id=49140&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download the Microsoft android emulator
&lt;a href=&#34;https://www.visualstudio.com/vs/msft-android-emulator/&#34;&gt;https://www.visualstudio.com/vs/msft-android-emulator/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download Android studio
&lt;a href=&#34;https://developer.android.com/studio/index.html&#34;&gt;https://developer.android.com/studio/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download fiddler
&lt;a href=&#34;https://www.telerik.com/download/fiddler&#34;&gt;https://www.telerik.com/download/fiddler&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download each of the tools and install them&lt;/li&gt;
&lt;li&gt;Setup fiddler to allow remote connections&lt;/li&gt;
&lt;li&gt;Configure the proxy in the Android device by press + holdon the network&lt;/li&gt;
&lt;li&gt;Install the Intune Company portal by drag+Drop (if you need it)&lt;/li&gt;
&lt;li&gt;Browse to the loopback connection in the Android browser &lt;a href=&#34;http://ipv4.fiddler:8888&#34;&gt;http://ipv4.fiddler:8888&lt;/a&gt; (default)&lt;/li&gt;
&lt;li&gt;Install the root certificate&lt;/li&gt;
&lt;li&gt;Start troubleshooting&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>ADFS Rapid restore tool errors</title>
      <link>http://www.wrish.com/post/errors-with-adfs-rapid-restore-tool/</link>
      <pubDate>Wed, 15 Mar 2017 11:42:35 -0500</pubDate>
      
      <guid>http://www.wrish.com/post/errors-with-adfs-rapid-restore-tool/</guid>
      <description>&lt;p&gt;Troubleshooting the ADFS Rapid Restore Tool&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; import-module ADFSRapidRecreationTool.dll
 import-module : The specified module &#39;ADFSRapidRecreationTool.dll&#39; was not loaded because no valid module file was found in any module directory.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Supply the full path to the dll to import it
&lt;code&gt;Import-module &#39;C:\Program Files (x86)\ADFS Rapid Recreation Tool\ADFSRapidRecreationTool.dll&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Backup-ADFS : Failed to connect to the database associated with ADFS&lt;/code&gt;
You do not have permissions to the ADFS database, if you are using a SQL database make sure your account has access to the database, if WID, make sure you are running as administrator.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Restore-ADFS : Failed to Decrypt the file&lt;/code&gt;
You have additional files in the backup directory that were not created (and encrypted by the tool). The files themselves will be copied to a temporary working folder
&lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\ADFSRapidRecreationTool\tempFolder&lt;/code&gt; which will prevent you from using Restore-ADFS if even if you try again with a folder without the problematic files. Delete this directory and remove all files except the following from your backup folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.xml
db.xml
installParams.xml
metadata.xml
SSLCert-&amp;lt;THUMBPRINT&amp;gt;.pfx
dkm.ldif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Restore-ADFS : Wrong password given to decrypt the backup&lt;/code&gt;
The password you have provided for ADFS backup decryption is incorrect, check the password and try again.&lt;/p&gt;

&lt;p&gt;Even though the tool doesn&amp;rsquo;t respond to the &lt;code&gt;-Verbose&lt;/code&gt; flag, it does create a verbose log in the appdata folder &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;\AppData\Local\ADFSRapidRecreationTool\ADFSRestore_Logs&lt;/code&gt; review the contents of these log files for help with errors.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Assign EMS licenses to all licensed users with dynamic groups</title>
      <link>http://www.wrish.com/post/assign-ems-licenses-with-dynamic-groups/</link>
      <pubDate>Fri, 10 Mar 2017 11:42:35 -0500</pubDate>
      
      <guid>http://www.wrish.com/post/assign-ems-licenses-with-dynamic-groups/</guid>
      <description>&lt;p&gt;Azure conditional access provides flexible control over access to Office 365 resources and services based on location/user group membership/device etc. If you set up conditional access rules, any user who doesn&amp;rsquo;t have an Azure AD Premium license will not be affected by them - access is permitted by default!&lt;/p&gt;

&lt;p&gt;How to work around this without manually assigning licenses to every user or using a &lt;a href=&#34;http://www.wrish.com/post/assign-ems-licenses/&#34;&gt;dodgy script&lt;/a&gt;? Azure AD has a capability called &lt;em&gt;Dynamic Groups&lt;/em&gt;. With &lt;em&gt;Dynamic Groups&lt;/em&gt; you can create a group with membership based on a query.&lt;/p&gt;

&lt;p&gt;This query will result in a group that contains all users with Exchange, Sharepoint, Office or S4B enabled.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(user.assignedPlans -any ((assignedPlan.service -match &amp;quot;exchange|SharePoint|Microsoft(CommunicationsOnline|Office)&amp;quot;) -and (assignedPlan.capabilityStatus -eq &amp;quot;Enabled&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you simply &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/active-directory-licensing-group-assignment-azure-portal&#34;&gt;assign EMS licenses&lt;/a&gt; to the dynamic group. Now, when a user is activated for Exchange etc, they immediately get an EMS license and Conditional Access applies. The user will inherit the license until they are no longer a member of the group&lt;/p&gt;

&lt;p&gt;Read more about creating &lt;em&gt;Dynamic Groups&lt;/em&gt; here &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/active-directory-groups-dynamic-membership-azure-portal&#34;&gt;https://docs.microsoft.com/en-us/azure/active-directory/active-directory-groups-dynamic-membership-azure-portal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During testing in a small environment I found that the license membership changed within 5 minutes.&lt;/p&gt;

&lt;p&gt;Possible values for &lt;em&gt;assignedPlan.service&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Value&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Service Friendly Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ProcessSimple&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Flow for Office365&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;PowerAppsService&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PowerApps for Office 365&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;TeamspaceAPI&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Microsoft Teams&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ProjectWorkManagement&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Microsoft Planner&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Sway&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sway&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;YammerEnterprise&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yammer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;MicrosoftOffice&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Office 365 ProPlus&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;MicrosoftCommunicationsOnline&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Skype for Business Online&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SharePoint&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SharePoint Online&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;exchange&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Exchange Online&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Deskless&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Staff Hub&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;RMSOnline&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Azure Information Protection Plan &lt;br /&gt;Azure Rights Management&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;MultiFactorService&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Azure Multi-Factor Authentication&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;AADPremiumService&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Azure Active Directory Premium&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SCO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Intune A Direct&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Adallom&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Microsoft Cloud App Security&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;VolumeLicensing&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Microsoft Business Center&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Possible values for &lt;em&gt;assignedPlan.capabilityStatus&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Value&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Deleted&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;License has been removed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Enabled&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;License is active&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Suspended&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;License has been removed (applies to EMS licenses)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Assign EMS licenses to all licensed users</title>
      <link>http://www.wrish.com/post/assign-ems-licenses/</link>
      <pubDate>Mon, 13 Feb 2017 11:42:35 -0500</pubDate>
      
      <guid>http://www.wrish.com/post/assign-ems-licenses/</guid>
      <description>&lt;p&gt;Azure conditional access provides amazingly flexible control over access to Office 365 resources and services based on location/user group membership/device etc. Leveraging it to block access generally requires EMS (Enterprise Mobility + Security) licenses for all users. This short script will assign EMS licenses to all users in your tenant who are licensed but do not have EMS yet.
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$VerbosePreference = &amp;quot;Continue&amp;quot;
$SKU = get-msolaccountSKU | ?{$_.accountskuid -match &#39;:EMS$&#39;} | select -expand AccountSKUID
if ($SKU) {
    $LicensingFailures = @{}
   $allUsersThatNeedEMS = get-msoluser -all | ?{$_.islicensed -and !($_.licenses | ?{$_.accountskuid -eq $SKU})}
   $allusersThatNeedEMS | %{
        $u = $_;
        try{ 
            Set-MsolUserLicense -UserPrincipalName $u.userprincipalname -AddLicenses $SKU -ErrorAction Stop
            Write-verbose &amp;quot;Successfully added $SKU to $($u.userprincipalname)&amp;quot; 
        } catch {
            Write-Error &amp;quot;Failed to add $SKU to $($u.userprincipalname) because: $_&amp;quot;
            $LicensingFailures.&amp;quot;$($u.userprincipalname)&amp;quot; = $_
        }
    }
    Write-host &amp;quot;The following failures occurred&amp;quot;
    $LicensingFailures
} else {
    Write-host &amp;quot;No EMS license SKU found&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>User Profile Cleanup</title>
      <link>http://www.wrish.com/post/cleanup-user-profiles/</link>
      <pubDate>Mon, 23 Jan 2017 11:42:35 -0500</pubDate>
      
      <guid>http://www.wrish.com/post/cleanup-user-profiles/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://gallery.technet.microsoft.com/Cleanup-UserProfiles-277a8084&#34;&gt;Download Cleanup-UserProfiles.ps1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Big environments get messy, lots of users, lots of admins, lots of logging in here and there.&lt;/p&gt;

&lt;p&gt;Profiles accumulate, C drive starts to get full, oh the humanity! Fear not humble Admin, on our adventures today we discover how to remove old user profiles with naught but the flick of a WMI method.&lt;/p&gt;

&lt;p&gt;The meat and bonse of this function is getting user profiles and deleting them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$userprofiles = Get-WmiObject -Class Win32_UserProfile
$userprofiles[$whichOne].delete()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But before we can pull the trigger and send these profiles to the depths, there will be some evaluation of dates, some checking that they aren&amp;rsquo;t important, and some validating using ShouldProcess.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[CmdletBinding(
     SupportsShouldProcess=$true,
    ConfirmImpact=&amp;quot;High&amp;quot;
  )]param ($computerName= &#39;.&#39;,$AgeLimit=&#39;60&#39;, $Exclude)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By declaring &lt;code&gt;supportsShouldProcess=$true&lt;/code&gt; it means that we can make use of the COnfirm/Force/Whatif because deleting user profiles is surely an activity to be feared. What if you delete a service account profile? Your best friend Greg? Such activities are the folley of adventurous Admins.&lt;/p&gt;

&lt;p&gt;By wrapping our dangerous bits in &lt;code&gt;$Pscmdlet.shouldProcess(&amp;quot;The thing I am about to do&amp;quot;)&lt;/code&gt; we can give the Admin a chance to save their skin, and their friendships.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt; if ($pscmdlet.ShouldProcess($activity)) {
        Write-Verbose &amp;quot;Attempting to $activity&amp;quot;
        $profile.Delete()       
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go forth wayward Admin, delete those profiles, watch as you recover untold disk space and make the data gods smile.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gallery.technet.microsoft.com/Cleanup-UserProfiles-277a8084&#34;&gt;Download Cleanup-UserProfiles.ps1&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Paste an array into a variable</title>
      <link>http://www.wrish.com/post/paste-me-an-array/</link>
      <pubDate>Thu, 19 Jan 2017 11:42:35 -0500</pubDate>
      
      <guid>http://www.wrish.com/post/paste-me-an-array/</guid>
      <description>&lt;p&gt;You&amp;rsquo;ve got a list of values, you want that in an array.&lt;/p&gt;

&lt;p&gt;You could copy it to a file, and import it. You could dump it as a string and split it into an array.. or you could &lt;code&gt;Create-ArrayFromPastedText&lt;/code&gt;.
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;function Create-ArrayFromPastedText ($returnvalue = &amp;quot;&amp;quot;)
{
    $result = @()
    while ($true) {
        $value = read-host    
        if ($value -eq $returnvalue){
            return $result
        } else {
            $result += $value
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use it like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$MyArray = create-Arrayfrompastedtext
#Here is a read-host line, just copy and paste your list of computers/users etc
Item1
Item2
Item3

#when you enter an empty line the array closes and returns
#if you want your array to include empty lines use the -returnvalue paramter to change
#the value that signifies the end of the array.

#And then just use your array
$MyArray |?{$_ -match &#39;[13]&#39;}
Item1
Item3
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Check if Office 365 has Your Updated ADFS Certificates</title>
      <link>http://www.wrish.com/post/check-adfs-certificates-with-office365-configuration/</link>
      <pubDate>Sun, 15 Jan 2017 11:42:35 -0500</pubDate>
      
      <guid>http://www.wrish.com/post/check-adfs-certificates-with-office365-configuration/</guid>
      <description>&lt;p&gt;Download it here &lt;a href=&#34;https://gallery.technet.microsoft.com/Check-and-Update-ADFS-3f27ee5e&#34;&gt;https://gallery.technet.microsoft.com/Check-and-Update-ADFS-3f27ee5e&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This script has probably lived its useful life, but I&amp;rsquo;m sharing it anyway, because.. well why not!&lt;/p&gt;

&lt;p&gt;When you want to quickly check to see if your published federation metadata (containing your ADFS token signing certificates) exists on Office 365 you can use &lt;code&gt;Get-MsolFederationProperty&lt;/code&gt; that&amp;rsquo;s great if you have one domain.. but what if you have 25 or 50.&lt;/p&gt;

&lt;p&gt;Create a profile on your ADFS servers&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;notepad $profile.alluserscurrenthost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy and paste this into the profile and click save&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;function Check-ADFSFederationForAllDomains {
    
    get-msoldomain | ?{$_.authentication -eq &amp;quot;Federated&amp;quot; -and !$_.rootDomain } | %{
        Write-host Processing $_.Name
        $SETUP = Get-MsolFederationProperty –DomainName $_.Name
        if ($setup[0].TokenSigningCertificate -eq $setup[1].TokenSigningCertificate -and $setup[0].NextTokenSigningCertificate -eq $setup[1].NextTokenSigningCertificate){
            Write-host $_.Name &amp;quot;Token Signing and Next Token Signing Certificates Match&amp;quot; -ForegroundColor Green      
         } else {
            Write-host $_.Name &amp;quot;Token Signing and/or Next Token Signing Certificates DO NOT Match&amp;quot; -ForegroundColor REd    
         }
      } 
}
write-host &#39;Check-ADFSFederationForAllDomains&#39;

Function Update-ADFSFederationForAllDomains ($supportMultipleDomains){
    
    get-msoldomain | ?{$_.authentication -eq &amp;quot;Federated&amp;quot; -and !$_.rootDomain } | %{
        Write-host Processing $_.Name
        Update-MsolFederatedDomain –DomainName $_.Name -SupportMultipleDomain:$supportMultipleDomains
       
      } 
}
Write-Host &#39;Update-ADFSFederationForAllDomains&#39; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when the time comes to check just run &lt;code&gt;Check-ADFSFederationForAllDomains&lt;/code&gt; followed by &lt;code&gt;Update-ADFSFedrationForAllDomains&lt;/code&gt; if you need to update.&lt;/p&gt;

&lt;p&gt;Download it here &lt;a href=&#34;https://gallery.technet.microsoft.com/Check-and-Update-ADFS-3f27ee5e&#34;&gt;https://gallery.technet.microsoft.com/Check-and-Update-ADFS-3f27ee5e&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generate an SHA-1 signed certificate after cutover to SHA-2</title>
      <link>http://www.wrish.com/post/switch-ms-pki-back-to-sha1/</link>
      <pubDate>Wed, 04 Jan 2017 23:47:35 +0000</pubDate>
      
      <guid>http://www.wrish.com/post/switch-ms-pki-back-to-sha1/</guid>
      <description>&lt;p&gt;You&amp;rsquo;ve finally made the switch on your Microsoft AD CS PKI infrastructure to SHA2 (SHA256)&amp;hellip; but there is always one.&lt;/p&gt;

&lt;p&gt;One outlier application that won&amp;rsquo;t accept an SHA-2 certificate and needs an SHA1 certificate to keep chugging for 1 more year.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t worry, you can switch your Active Directory Certificate Services PKI infrastructure back to SHA-1 for a little bit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;certutil -setreg ca\csp\CNGHashAlgorithm SHA1
restart-service certsvc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now issue your certificate, and switch back.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;certutil -setreg ca\csp\CNGHashAlgorithm SHA256
restart-service certsvc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that only the leaf certificate will be SHA1, your chain will still be SHA2 - if your application can&amp;rsquo;t handle that then it is out of luck.&lt;/p&gt;

&lt;p&gt;There is a small chance that some auto-enrolled certificate ALSO got issued with an SHA1 certificate. So you can run a quick query to see all the certificates that were issued in the last hour&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;certutil -restrict &amp;quot;SubmittedWhen &amp;gt;= now-00:01, Disposition = 20&amp;quot; -view  csv | ConvertFrom-Csv | fl &amp;quot;Request Submission Date&amp;quot;,&amp;quot;Requester Name&amp;quot;,&amp;quot;Issued Common Name&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you were unlucky and a certificate was issued while you were in SHA1 you may want to go and renew it again.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hosting for free with GitHub Pages using Windows (with custom domain)</title>
      <link>http://www.wrish.com/post/straightforward-guide-to-hosting-for-free-with-github-pages-on-windows/</link>
      <pubDate>Thu, 29 Dec 2016 17:47:35 +0000</pubDate>
      
      <guid>http://www.wrish.com/post/straightforward-guide-to-hosting-for-free-with-github-pages-on-windows/</guid>
      <description>

&lt;p&gt;I am unashamedly cheap. Here is how to host your personal website for no cost on github pages running on a windows platform.&lt;/p&gt;

&lt;h2 id=&#34;install-a-git-client&#34;&gt;Install a GIT client&lt;/h2&gt;

&lt;p&gt;There are lots - I chose the one that came up first in a Google search and haven&amp;rsquo;t tried any others.
Download &lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;Git For Windows&lt;/a&gt;
Run &lt;em&gt;Git-2.xx.x-64-bit.exe&lt;/em&gt; that you just downloaded and install setting the following options&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use Git from the Windows Command Prompt (default)&lt;/li&gt;
&lt;li&gt;Checkout as-is, commit as-is (not default)&lt;/li&gt;
&lt;li&gt;Everything else default&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Choosing the second item just means you will see less verbose output if you are using a Windows only environment.&lt;/p&gt;

&lt;h2 id=&#34;sign-up-for-a-github-account&#34;&gt;Sign up for a GitHub account&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Go here &lt;a href=&#34;https://github.com/&#34;&gt;https://github.com/&lt;/a&gt; and follow the bouncing ball to create your account, mine is &lt;em&gt;wrish&lt;/em&gt; wherever I use &lt;em&gt;wrish&lt;/em&gt; replace it with your chosen name.&lt;/li&gt;
&lt;li&gt;Choose the free option (obviously).&lt;/li&gt;
&lt;li&gt;Verify your email address&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;create-your-website-repository&#34;&gt;Create your website repository&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Click &lt;em&gt;Start a Project&lt;/em&gt; to create a new repository&lt;/li&gt;
&lt;li&gt;Enter the repository name as &lt;em&gt;wrish&lt;/em&gt;.github.io &amp;#8592; replace &lt;em&gt;wrish&lt;/em&gt; with your username&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Create Repository&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;upload-your-first-bits-and-pieces&#34;&gt;Upload your first bits and pieces&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;On your Windows workstation with Git installed, open a command prompt&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Create your base folder&lt;br&gt;
&lt;code&gt;md c:\website\www.wrish.com&lt;/code&gt;&lt;br&gt;
&lt;code&gt;cd c:\website\www.wrish.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add a &lt;code&gt;robots.txt&lt;/code&gt; file (allow search engines to scan) and a &lt;code&gt;CNAME&lt;/code&gt; file (replace www.wrish.com with your custom domain)&lt;br&gt;
&lt;code&gt;echo www.wrish.com &amp;gt; CNAME&lt;/code&gt;&lt;br&gt;
&lt;code&gt;echo User-agent: * &amp;gt; robots.txt&lt;/code&gt;&lt;br&gt;
&lt;code&gt;echo Disallow: &amp;gt;&amp;gt; robots.txt&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Here is where you copy your &lt;code&gt;index.html&lt;/code&gt; and other files into &lt;code&gt;c:\website\www.wrish.com&lt;/code&gt; or just create a placeholder index.html&lt;br&gt;
&lt;code&gt;echo Hello World &amp;gt; index.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Init a Git database in the current folder (note if you get an error here, Git4Windows isn&amp;rsquo;t installed/working)&lt;br&gt;
&lt;code&gt;git init&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git config --global credential.helper wincred&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git config user.name wrish&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add your first commit (replace &lt;em&gt;wrish&lt;/em&gt; with your username)&lt;br&gt;
&lt;code&gt;git add index.html CNAME robots.txt&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git commit -m &amp;quot;first commit&amp;quot;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git remote add origin https://github.com/wrish/wrish.github.io.git&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git push -u origin master&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point you will be prompted for your Git username and password and git should be notified that a new &lt;em&gt;branch&lt;/em&gt; called &lt;em&gt;master&lt;/em&gt; was created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.wrish.com/post/images/github-success.png&#34; alt=&#34;Branch master set up to track remote branch master from origin&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can also browse to your website &lt;a href=&#34;https://wrish.github.io&#34;&gt;https://wrish.github.io&lt;/a&gt; and you should see Hello World or your content.&lt;/p&gt;

&lt;h2 id=&#34;create-a-cname-to-make-your-website-work&#34;&gt;Create a CNAME to make your website work&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;If you don&amp;rsquo;t already have a custom domain, you will need to purchase one&lt;/li&gt;
&lt;li&gt;Log into your DNS provider and create a CNAME records (alias) pointing to your Github Website (Don&amp;rsquo;t use a wildcard alias)&lt;br&gt;
&lt;code&gt;WWW CNAME wrish.github.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Test it out! &lt;a href=&#34;http://www.wrish.com&#34;&gt;http://www.wrish.com&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ok, so now you have a website, but you need to update it. It involves a few commands that, frankly, I don&amp;rsquo;t understand, so just create a batch file &lt;code&gt;Publish.bat&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd c:\website\www.wrish.com 
git add * 
git commit -m &amp;quot;Scripted Publish %date%&amp;quot; 
git push origin master 
pause 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now all it takes is a double click and anything you add to &lt;code&gt;c:\website\www.wrish.com&lt;/code&gt; will be uploaded.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Office 365 - Convert between Immutable ID and AD Object </title>
      <link>http://www.wrish.com/post/convert-between-immutableid-and-ad-object/</link>
      <pubDate>Thu, 22 Dec 2016 20:53:49 -0500</pubDate>
      
      <guid>http://www.wrish.com/post/convert-between-immutableid-and-ad-object/</guid>
      <description>&lt;p&gt;Two quick scripts to convert between ImmutableIDs and AD Objects with pipeline capability.
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;
function get-ImmutableIDfromADObject
{
    [CmdletBinding()] Param(
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]$ADObject) 
   process{ 
        if (!$ADObject.objectguid){$ADObject = get-adobject $AdObject -properties objectGuid}
        [system.convert]::ToBase64String($ADObject.objectguid.tobytearray())
    }
}

function get-ADObjectFromImmutableID{
      [CmdletBinding()] Param(
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)][string]$ImmutableID)
   process { get-adobject  ([guid]([system.convert]::FromBase64String($ImmutableID)))}
}

&amp;lt;#
get-aduser shane.wright | get-ImmutableIDfromADObject
6WuADX7LfUa8DVAQGxuZcA==

get-aduser shane.wright | get-ImmutableIDfromADObject | get-ADObjectFromImmutableID

DistinguishedName                          Name         ObjectClass ObjectGUID                          
-----------------                          ----         ----------- ----------                          
CN=Shane Wright,OU=Staff,DC=contoso,DC=com Shane Wright user        0d806be9-cb7e-467d-bc0d-50101b1b9970


get-ADObjectFromImmutableID 6WuADX7LfUa8DVAQGxuZcA==
DistinguishedName                          Name         ObjectClass ObjectGUID                          
-----------------                          ----         ----------- ----------                          
CN=Shane Wright,OU=Staff,DC=contoso,DC=com Shane Wright user        0d806be9-cb7e-467d-bc0d-50101b1b9970
#&amp;gt;

&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>List all of a users group memberships</title>
      <link>http://www.wrish.com/post/list-all-nested-memberships/</link>
      <pubDate>Mon, 19 Dec 2016 19:54:49 -0500</pubDate>
      
      <guid>http://www.wrish.com/post/list-all-nested-memberships/</guid>
      <description>

&lt;p&gt;Download the script &lt;a href=&#34;https://gallery.technet.microsoft.com/Get-nested-group-e9ce3687&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Auditing user access is hard, usually you audit from resource out - eg, finding all Domain Admins, or finding all users with full acecss to &lt;em&gt;SecretShare$&lt;/em&gt; share on &lt;em&gt;SecretServer01&lt;/em&gt;. But occasionally want to audit from user out.. this is hard.. even impossible (if you have a very big environment). Lets talk about the first step &lt;em&gt;Enumerating Nested Groups&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;token-groups&#34;&gt;Token Groups&lt;/h2&gt;

&lt;p&gt;Each user has a constructed attribute called &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ms680275(v=vs.85).aspx&#34;&gt;&lt;code&gt;tokengroups&lt;/code&gt;&lt;/a&gt; that returns a list of all transitive group memberships. You can query &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ms680275(v=vs.85).aspx&#34;&gt;&lt;code&gt;tokengroups&lt;/code&gt;&lt;/a&gt; using &lt;code&gt;get-adobject&lt;/code&gt; like this&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$userDN = &#39;CN=Tom,OU=sales,DC=wrish,DC=com&#39;
get-adobject -SearchBase $userDN -SearchScope Base -Properties TokenGroups  -filter *
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; but there are a couple of problems, you get back SIDs and only SIDs, that means no &lt;em&gt;Distribution Only&lt;/em&gt; groups and you have to manually convert them into objects or DNs if you want useful visual reporting. You can do that pretty easily (but slowly) like this&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;function get-TokenGroups ($objectDN) {
    $ADObject = get-adobject -SearchBase $objectDN -SearchScope Base -Properties TokenGroups  -filter *
    foreach ($Sid in $ADObject.tokengroups){
        ([ADSI]&amp;quot;LDAP://&amp;lt;SID=$SID&amp;gt;&amp;quot;).distinguishedname
    }       
}
get-TokenGroups  &#39;CN=Tom,OU=sales,DC=wrish,DC=com&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; also, some groups are missing in a multi-domain environment - &lt;em&gt;Domain Local&lt;/em&gt; groups in remote domains. &lt;em&gt;Domain Local&lt;/em&gt; group memberships aren&amp;rsquo;t replicated to the &lt;em&gt;Global Catalog&lt;/em&gt;, so the GC doesn&amp;rsquo;t add them to the tokengroups value when queried.&lt;/p&gt;

&lt;h2 id=&#34;memberof-evaluation&#34;&gt;MemberOf Evaluation&lt;/h2&gt;

&lt;p&gt;Each user has a &lt;code&gt;MemberOf&lt;/code&gt; attribute which you can query recursively to get at all those juicy remote domain groups. There are plenty of examples of these scripts available they usually commit the various sins of PowerShelling like &lt;a href=&#34;https://gallery.technet.microsoft.com/Export-nested-groups-of-36e761f1&#34;&gt;exporting to csv&lt;/a&gt; or &lt;a href=&#34;https://gallery.technet.microsoft.com/Get-nested-group-15f725f2&#34;&gt;not generating objects at all&lt;/a&gt; or a &lt;a href=&#34;https://gallery.technet.microsoft.com/Get-ADUserNestedGroupMember-d39bb04d&#34;&gt;particularly good one that even outputs some nice verbose info&amp;hellip; but breaks when group memberships traverse domains&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;They are also all incredibly complicated, sigh.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;function EnumerateMemberOf($Object, $ResultSoFar=@())
{ 
#Helper function to walk $object&#39;s memberof attribute and list out all group memberships    
    if ($object.memberof){
        $Results =  @();        
        foreach ($group in $Object.memberof){
            #prevent nesting loops trapping by checking to make sure the group hasn&#39;t been searched already
            if ($ResultSoFar -notcontains $Group) {
                #Bind directly to the group with ADSI - this will automatically follow referrals and work with 
                #multi domain forests
                $TempGroup = [ADSI]&amp;quot;LDAP://$Group&amp;quot; ;
                $ResultSoFar += $Group.ToString();
                #Enumerate the next level of memberof
                $Results += EnumerateMemberOf $TempGroup $ResultSoFar ;
                $Results += $Group;
            }            
         }
        return $Results
    } 
}

function get-ADNestedMembership ($Identity) 
    $ADuser = get-aduser $Identity -Properties memberof,distinguishedname,primaryGroup
    write-output (new-object psobject -property @{distinguishedname=$aduser.distinguishedname;&#39;NestedMemberOf&#39;=(@(enumerateMemberof $ADuser)+(enumerateMemberof (get-adgroup $AdUser.primaryGroup -properties memberof)))})
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the advanced functions (with pipline goodness) you&amp;rsquo;ll need to download it &lt;a href=&#34;https://gallery.technet.microsoft.com/Get-nested-group-e9ce3687&#34;&gt;https://gallery.technet.microsoft.com/Get-nested-group-e9ce3687&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>